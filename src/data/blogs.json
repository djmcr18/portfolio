// No longer required as firestore database has been implemented to ensure admin features were still available upon netlify publish.

{
    "blogs": [
        {
            "id": 1,
            "title": "1.1P: Intro to HTML, CSS, and GitHub",
            "body": "Undertaking this task of creating an HTML page, applying CSS styling, and getting introduced to Git and GitHub has been an insightful learning experience and a great introduction to the basics and fundamentals of how a website is built. Crafting the HTML structure with diverse tags like images, tables, and forms emphasized the versatility of HTML in designing interactive web content. Implementing inline, internal, and external CSS styles showcased different ways to enhance the appearance and layout of elements.<br><br>This task showed the importance of using GitHub to enable easy collaboration with team members and other individuals that may need access to files."
        },
          
        {
            "id": 2,
            "title": "1.2P: Intro to Responsive Web Design and Javascript",
            "body": "Q1. What is Responsive Web Design and Why is it Important?<br><br>Responsive web design refers to the method of designing and developing websites in a way that ensures optimal viewing and accessibility across most devices and screen sizes, including computers, tablets, and smartphones. The main objective is to create a seamless user experience by automatically adjusting the layout, content, and functionality of a website based on not only the screen size, but also the orientation of the device being used.<br><br>Responsive web design is important because of the wide range of devices people use to access the internet. A website that is not responsive for a certain device will appear distorted and usually unreadable, which is obviously frustrating for users/consumers and will drive them away. By embracing responsive design, websites can adapt their design elements, such as images, text, and navigation menus, to provide a consistent and user-friendly experience regardless of the device.<br><br>The responsive web design approach is also more efficient to create and maintain websites. Instead of creating separate versions of a site for different devices, developers can focus on a single codebase, reducing development time and costs and simplifying updates.<br><br>Another reason for the importance of this web design method is the fact that Google's search algorithms favour mobile-friendly sites, and with mobile browsing being highly prevalent in our current era, responsive web design has become the industry standard.<br><br>Ultimately, responsive web design is essential for delivering a consistent online experience to users across all devices and it boosts user satisfaction, retention, and the overall success of a website.<br><br>Q2. How to Implement Responsive Web Design With HTML and CSS<br><br>Responsive web design is achieved through various HTML and CSS techniques.<br><br>Media queries in CSS can be used to set breakpoints where the layout and styling should change. These queries apply different CSS rules based on the screen width.<br><br>Fluid grids play a crucial role, as they use relative units like percentages instead of fixed pixels for layout components. This allows elements to resize proportionally. Images can be made responsive by setting a maximum width of 100% to stop them from overflowing their containers.<br><br>CSS Flexbox and Grid layout systems are powerful tools for creating flexible and responsive designs. Flexbox is ideal for one-dimensional layouts, while Grid handles both rows and columns. These layout techniques enable better control over content placement and alignment across various devices.<br><br>Font sizing can be relative by using 'em' or 'rem' units to maintain readability on different screens and the option of hiding, rearranging, or resizing non-essential elements for smaller screens can be used to optimise the user experience.<br><br>Also, testing across multiple devices and screen sizes is essential to ensure the design works as intended on all devices."
        },

        {
            "id": 3,
            "title": "1.3P: Basic Portfolio Website",
            "body": "Throughout the journey of creating my personal portfolio website, I recognised the importance of effectively showcasing my skills and experiences. Leveraging the capabilities of HTML, CSS, and Vue 3, I designed and implemented a comprehensive platform to represent myself professionally.<br><br>I utilised HTML to structure the content and the foundation. Elements like headers gave a hierarchical layout to the site, making it user-friendly. Forms and tables were incorporated to enhance interactivity and display structured data respectively. I also embedded a favicon, enhancing the website's branding and making it easily recognizable in browser tabs.<br><br>With CSS, I accentuated the design aesthetics. I prioritized the website's responsiveness using media queries, ensuring an optimal viewing experience across a range of devices. The Grid and Flex layout models provided a fluid and adaptable design. By using internal CSS, the styling was organised and easily maintainable.<br><br>Vue 3 was important and allowed me to give the portfolio a bit more energy and that little bit extra to stand out more. Breaking down the website into reusable components streamlined the development process and improved code readability. Vue Router was employed to navigate between different views, creating a seamless user experience. I utilized Vue directives extensively: v-for to iterate over projects, v-if for conditional rendering, and v-model for two-way data binding in forms. This not only made the site interactive but also simplified code throughout.<br><br>The website was fluid and responsive design thanks to concepts like, CSS Grid and Flexbox. Implementing Vue 3 concepts strengthened my understanding of the framework, like the power and flexibility of components."
        },

        {
            "id": 4,
            "title": "2.1C: Intro to Vue 3 and Creating To Do List App",
            "body": "Task 1 Reflection (Exploring Vue 3):<br>In Task 1, I embarked on an exploration of Vue 3, a popular JavaScript framework. This allowed me to gain practical experience with Vue's core concepts, including conditional rendering and form input handling. I successfully utilized directives such as v-if, v-else, v-show, v-for, and v-model to control the visibility of elements and manage user input. The ability to toggle elements and dynamically update content based on user interactions was particularly enlightening. Additionally, I experimented with combining directives like v-if with v-for to achieve more complex conditional rendering.<br><br>Task 2 Reflection (Todo App with Vue 3):<br>For Task 2, I created a functional Todo App from scratch, using HTML, CSS, and Vue 3, without relying on third-party libraries or frameworks. This project allowed me to put my Vue 3 knowledge into practice. I implemented key Vue 3 concepts such as data binding, event handling, and conditional rendering.<br>• Data Binding: Vue's v-model directive enabled two-way data binding, ensuring that changes in the input field synchronized with the data model.<br>• Event Handling: I used Vue's event handling (@keyup.enter and @click) to capture user input and respond to actions like adding tasks and removing completed ones.<br>• Conditional Rendering: Conditional rendering was applied through v-for to display the list of tasks dynamically, and I used v-if to conditionally strike through completed tasks."
        },

        {
            "id": 5,
            "title": "2.2C: The Project - FOOPY",
            "body": "Overview:<br>\"Foopy \" is a dynamic and interactive website designed to cater to the diverse needs of Football enthusiasts worldwide. This project proposal outlines the plan for developing a website dedicated to providing users with the latest football news, enabling community engagement, and offering access to a one stop football shop. The proposal details the project's scope, design, features, and anticipated benefits.<br><br>Overall Website Design:<br>Foopy will aim for a design suited to football fans. Shades of green to echo the football pitches grass, a modern look for the ever-growing amount of youth in the sport, and an easy to use, concise, clean and responsive website that can be used on any device."
        },
          
        {
            "id": 6,
            "title": "2.3C: Vue 3 Concepts",
            "body": "In this website, I want to emphasise that the concepts discussed in the assignment were not only used in their specific demonstration sections but were also integrated throughout the entire project. These concepts became the building blocks of the website, contributing to its overall structure, interactivity, and user experience. Their consistent application across various parts of the website ensured a cohesive and well-rounded implementation.<br><br>1. Template Syntax:<br>Template syntax was at the core of the assignment's user interface and provided the structure and layout for rendering content dynamically. Text interpolation allowed for the seamless integration of data into the template, ensuring that variables were displayed appropriately. The use of v-html enabled the rendering of raw HTML content when needed. Attribute bindings, exemplified by v-bind:id, allowed for dynamic attribute assignment, enhancing flexibility in element manipulation. Additionally, JavaScript expressions within double curly braces, such as {{ '2 + 3 equals ' + (2 + 3) }}, provided a means to compute and display dynamic values within the template.<br><br>2. Methods:<br>Methods were important to my assignment and enabled me to define custom behaviour and logic within my components. They helped me create code that could be triggered in response to events or interactions, making my application interactive and responsive.<br><br>3. Reactivity Fundamentals<br>Reactivity fundamentals, like ref(), were integral to the assignment's functionality. They facilitated real-time data updates, ensuring that changes to variables triggered immediate UI adjustments, a key element in tasks like managing shopping list items and monitoring mouse coordinates. The introduction of script setup syntax streamlined component setup, simplifying code structure and bolstering maintainability. These reactivity concepts were fundamental in enhancing user interactivity and providing seamless feedback throughout the web application.<br><br>4. Computed Properties:<br>Class and style bindings are important in controlling the visual presentation of elements. Binding HTML classes with v-bind:class allowed for dynamic application of CSS classes based on data conditions. This concept was evident in scenarios like toggling class styles for elements. Similarly, binding inline styles with v-bind:style enabled dynamic styling by manipulating CSS properties based on data values. These class and style bindings were essential in creating a visually appealing and interactive user interface.<br><br>6. List Rendering:<br>List rendering using v-for was applied throughout the assignment’s code. It allowed me to efficiently iterate over arrays and objects, dynamically generating content based on data. This was particularly useful when displaying shopping list items, demonstrating various concepts in the \"Four Five Six\" section, and rendering components dynamically. The versatility of v-for simplified the task of presenting data in a structured and organised manner, contributing to a more user-friendly interface.<br><br>7. Event Handling: Listening to Events [v-on:click]:<br>Event handling using v-on:click enabled me to capture and respond to user interactions. Both inline handlers and method handlers were employed depending on the context. Inline handlers are used for immediate actions like toggling elements, while method handlers facilitate more complex operations.<br><br>8. Form Input Bindings:<br>Form input bindings with v-model were employed extensively for various input elements such as text fields, checkboxes, radio buttons, and select dropdowns. Additionally, v-model modifiers like .lazy, .number, and .trim were used to fine-tune the behaviour of input elements. This allowed for efficient two-way data binding between the user interface and underlying data. Whether adding items to a shopping list or demonstrating the use of modifiers, form input bindings played a crucial role in user interaction and data management.<br><br>9. Watchers:<br>Watchers were utilised to monitor changes in specific data properties and trigger custom logic when these properties were modified. They were employed behind the scenes to maintain the integrity of the shopping list and employed with custom code I created to ensure the function of the Mouse Tracker. Watchers enhance the reactivity of an application, ensuring that any changes to watched properties were handled appropriately.<br><br>10. Components:<br>Components served as reusable building blocks in the assignment, allowing me to encapsulate and modularise parts of the user interface. This concept was instrumental in creating a structured and organised codebase. I utilised props to pass data from parent components to child components, while events, triggered with $emit, facilitated communication in the opposite direction. Slots provided flexibility by allowing the insertion of custom content into components, enhancing their versatility and reusability.<br><br>11. Router:<br>The Vue Router was integrated into the project, enabling navigation between different views or pages within the single-page application. This concept was essential in creating a multi-page feel within a single-page application, offering a smooth and intuitive user experience."
        },

        {
            "id": 7,
            "title": "3.1D: The Project+ - FOOPY",
            "body": "Reflection on Distinction Task 3.1D: The Project+<br>My primary goal in task 3.1D was to experiment with and implement a myriad of web development concepts to enhance the functionality and aesthetics of the project from Task 2.2C. This journey was a combination of challenges, learnings, and rewarding outcomes, offering a deeper understanding of HTML, CSS, and Vue 3. Here's my reflection on the experiences and the integration of varied web development concepts.<br><br>Embracing Advanced HTML Concepts<br>The enriched news feed section was an exploration of multimedia integration within HTML, incorporating videos, images, YouTube embeds, and audio showcasing diverse HTML media concepts but also improving user engagement. The tactics whiteboard, built on the HTML canvas concept, was an interactive addition, allowing users to draw and strategize on a football-themed backdrop.<br><br>Optimizing with Vue 3<br>Vue 3 played a pivotal role in refining the website's structure. Through Vue components, views, and the router, the codebase became more organized and modular. The essence of Vue's component-based architecture was truly realized, aiding in segregating functionalities and ensuring each part of the website served a distinct purpose. The proper use and implementation of the vue-3 concepts will allow the website to be edited and worked on in future additions much easier and more efficiently.<br><br>Leveraging Advanced CSS Techniques<br>Ensuring the website's adaptability to different devices was achieved using responsive design principles, primarily through CSS media queries. This showcased the concept of creating websites that provide a consistent experience across varied screen sizes. CSS transitions and animations further elevated the user experience, but can be improved in further editions of this website.<br><br>Google Maps Integration<br>Google Maps was incorporated through an API, serving as a practical demonstration of embedding third-party services within a web page. This feature allowed me to show the user the various store locations of Foopy around Australia.<br><br>Backend Integration for Enhanced Interactivity<br>Transitioning beyond static content, I delved into backend development using XAMPP’s Apache Web Server, PHP code, and MySQL Workbench. This allowed the creation of a dynamic registration form that captures and stores user data in a secure database. This backend integration is a good demonstration of the web development concept of creating interactive websites with real-time data processing and storage capabilities. To make the link from the registration form to the database, I had to fetch the PHP file from the htdocs folder of the XAMPP folder. I mention this in the code comments of the php file, which I included a copy of in the vue project folder for reference.<br><br>Other Notable Enhancements<br>The website underwent several refinements to better manifest the web development concepts. The introduction of an image carousel was a nod to dynamic content display using pure CSS and HTML. The improved shopping cart functionality, the primary and secondary navigation bars, and the general aesthetics and functionality all received upgrades, reflecting the advanced CSS techniques and Vue concepts learned.<br><br>The progression from Task 2.2C to Task 3.1D embodies the evolution of my knowledge in web development concepts. Task 3.1D was more than just a follow-up; it was an effort to push boundaries and explore the full potential of HTML, CSS, and Vue 3 in creating a website that not only functions but also effectively showcases varied web development techniques. Through this task, I have appreciated the synergy of different web development concepts and their collective impact on creating a comprehensive web experience."
        }           
    ]
}
  